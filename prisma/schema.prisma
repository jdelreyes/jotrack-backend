// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  userName String

  email String @unique
  hash  String

  dateTimeCreated DateTime @default(now())
  dateTimeUpdated DateTime @updatedAt

  role String @default("user")

  firstName String
  lastName  String

  phoneNumber Float

  jobs UserJobApplication[]

  userActivity UserActivity?
  address      Address?
  resume       Resume?
  openAI       OpenAI?

  @@map("users")
}

model Job {
  id Int @id @default(autoincrement())

  title String

  description  String
  position     String
  requirements String[]

  companyName String

  postalCode String
  street     String
  city       String
  province   String
  country    String

  dateTimePosted  DateTime @default(now())
  dateTimeUpdated DateTime @updatedAt

  users UserJobApplication[]

  @@map("jobs")
}

model UserJobApplication {
  status String @default("pending")

  dateTimeApplied DateTime @default(now())
  dateTimeUpdated DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  job   Job @relation(fields: [jobId], references: [id])
  jobId Int

  generatedResume generatedResume?

  @@id([userId, jobId])
  @@map("userJobApplications")
  @@unique([jobId, userId])
}

model Address {
  id Int @id @default(autoincrement())

  postalCode String
  street     String
  city       String
  province   String
  country    String

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model UserActivity {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  searchHistory String[]
  jobsVisited   Int[]

  dateTimeEmitted DateTime @default(now())
  dateTimeUpdated DateTime @updatedAt

  @@id([userId])
  @@map("userActivities")
}

model Resume {
  objective             String
  experience            String[]
  education             String[]
  skills                String[]
  additionalInformation String[]

  dateTimeCreated DateTime @default(now())
  dateTimeUpdated DateTime @updatedAt

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@id([userId])
  @@map("resumes")
}

model generatedResume {
  objective             String
  experience            String[]
  education             String[]
  skills                String[]
  additionalInformation String[]

  dateTimeCreated DateTime @default(now())
  dateTimeUpdated DateTime @updatedAt

  userJobApplicationJobId  Int                @unique
  userJobApplicationUserId Int                @unique
  userJobApplication       UserJobApplication @relation(fields: [userJobApplicationJobId, userJobApplicationUserId], references: [jobId, userId])

  @@unique([userJobApplicationJobId, userJobApplicationUserId])
  @@map("generatedResumes")
}

model OpenAI {
  threadId String
  runId    String

  dateTimeCreated DateTime @default(now())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@id([userId])
  @@map("openAI")
}
